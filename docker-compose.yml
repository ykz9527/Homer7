version: '2.1'

services:
  caddy:
   container_name: caddy
   image: stefanprodan/caddy
   ports:
     - "3000:3000"
     - "9093:9093"
     - "9080:9080"
   volumes:
     - ./caddy/:/etc/caddy/
   environment:
     - ADMIN_USER=${ADMIN_USER:-admin}
     - ADMIN_PASSWORD=${ADMIN_PASSWORD:-admin}
   restart: unless-stopped
   labels:
     org.label-schema.group: "monitoring"
  db:
    image: postgres:11-alpine
    environment:
      POSTGRES_PASSWORD: homerSeven
      POSTGRES_USER: root
   #    expose:
   #   - 5432
    ports:
      - "5432:5432"
    restart: unless-stopped
    volumes:
      - ./conf/init-user-db.sh:/docker-entrypoint-initdb.d/init-user-db.sh
      - ./postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "psql -h 'localhost' -U 'root' -c '\\l'"]
      interval: 1s
      timeout: 3s
      retries: 30

  heplify-server:
    image: sipcapture/heplify-server:master
    container_name: heplify-server
    ports:
      - "9060:9060"
      - "9060:9060/udp"
    command:
      - './heplify-server'
    environment:
      - "HEPLIFYSERVER_HEPADDR=0.0.0.0:9060"
        #      - "HEPLIFYSERVER_DBDRIVER=mysql"
      - "HEPLIFYSERVER_DBDRIVER=postgres"
      - "HEPLIFYSERVER_DBSHEMA=homer7"
      - "HEPLIFYSERVER_DBADDR=db:5432"
      - "HEPLIFYSERVER_DBUSER=root"
      - "HEPLIFYSERVER_DBPASS=homerSeven"
      - "HEPLIFYSERVER_DBDATATABLE=homer_data"
      - "HEPLIFYSERVER_LOGLVL=info"
      - "HEPLIFYSERVER_LOGSTD=true"
      - "HEPLIFYSERVER_PROMADDR=0.0.0.0:9096"
      - "HEPLIFYSERVER_PROMTARGETIP="
      - "HEPLIFYSERVER_PROMTARGETNAME="
      - "HEPLIFYSERVER_DBDROPDAYS=7"
    restart: unless-stopped
    expose:
      - 9090
    #  depends_on:
    #       db:
    #   condition: service_healthy
    labels:
      org.label-schema.group: "monitoring"

  homer-webapp:
    container_name: homer-webapp
    image: sipcapture/homer-app:master
    environment:
      - "DB_HOST=db"
      - "DB_USER=root"
      - "DB_PASS=homerSeven"
    expose:
      - 8001
    restart: unless-stopped
    #    depends_on:
    #  db:
   #    condition: service_healthy






































